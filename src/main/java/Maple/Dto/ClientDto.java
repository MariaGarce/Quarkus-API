package Maple.Dto;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;

import java.util.UUID;

import Maple.Entity.Client;

/**
 * Data Transfer Object for Client API requests and responses
 * 
 * Used for:
 * - Request body validation (POST/PUT operations)
 * - Response serialization (converting Client entities to JSON)
 * 
 * Note: While id and demonym are included for responses, they are ignored
 * in create/update requests as they are auto-generated by the system.
 */
public class ClientDto {

    /** Unique identifier (auto-generated, read-only in requests) */
    public UUID id;

    /** Client's first name */
    @NotBlank(message = "First name is required")
    public String firstName;

    /** Client's middle name (optional) */
    public String middleName;

    /** Client's last name */
    @NotBlank(message = "Last name is required")
    public String lastName;

    /** Client's second last name (optional) */
    public String secondLastName;

    /** Client's email address (must be unique, case-insensitive) */
    @NotBlank(message = "Email is required")
    @Email(message = "Email must be valid")
    public String email;

    /** Client's physical address */
    @NotBlank(message = "Address is required")
    public String address;

    /** Client's phone number */
    @NotBlank(message = "Phone is required")
    public String phone;

    /** ISO 3166-1 country code (e.g., "US", "ES", "MEX") */
    @NotBlank(message = "Country code is required")
    @Size(min = 2, max = 3, message = "Country code must be 2-3 characters (ISO 3166-1)")
    public String country;

    /** Country demonym (auto-populated from RestCountries API, read-only in requests) */
    public String demonym;

    public ClientDto() {
        // Default constructor
    }
    /**
     * Constructor to convert Client entity to DTO
     * Used for serializing database entities to JSON responses
     * 
     * @param client The Client entity to convert
     */
    public ClientDto(Client client) {
        this.id = client.id;
        this.firstName = client.firstName;
        this.middleName = client.middleName;
        this.lastName = client.lastName;
        this.secondLastName = client.secondLastName;
        this.email = client.email;
        this.address = client.address;
        this.phone = client.phone;
        this.country = client.country;
        this.demonym = client.demonym;
    }
}
